(()=>{"use strict";class e{constructor(e,t,n,r){this.templateEl=document.getElementById(e),this.hostEl=document.getElementById(t);const s=document.importNode(this.templateEl.content,!0);this.element=s.firstElementChild,r&&(this.element.id=r),this.attach(n)}attach(e){this.hostEl.insertAdjacentElement(e,this.element)}}var t,n;function r(e){let t=!0;return e.required&&(t=t&&0!==e.value.toString().trim().length),null!=e.minLen&&"string"==typeof e.value&&(t=t&&e.value.length>=e.minLen),null!=e.maxLen&&"string"==typeof e.value&&(t=t&&e.value.length<=e.maxLen),null!=e.min&&"number"==typeof e.value&&(t=t&&e.value>=e.min),null!=e.max&&"number"==typeof e.value&&(t=t&&e.value<=e.max),t}!function(e){e[e.NotEmpty=0]="NotEmpty",e[e.PostiveNum=1]="PostiveNum"}(t||(t={})),function(e){e.ACTIVE="active",e.FINISHED="finished"}(n||(n={}));class s{constructor(e,t,n,r,s){this.id=e,this.title=t,this.description=n,this.people=r,this.status=s}}class i{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}const l=class extends i{constructor(){super(),this.projects=[]}static getInstance(){return this.instance?this.instance:new this}addProject(e,t,r){const i=new s(Math.random().toString(),e,t,r,n.ACTIVE);this.projects.push(i),this.triggerListeners()}triggerListeners(){for(const e of this.listeners)e(this.projects.slice())}moveProject(e,t){const n=this.projects.find((t=>t.id===e));n&&n.status!=t&&(n.status=t,this.triggerListeners())}}.getInstance();function o(e,t,n){const r=n.value;return{configurable:!0,get(){return r.bind(this)}}}class a extends e{constructor(){super("project-input","app","afterbegin","user-input"),this.titleInputEl=this.element.querySelector("#title"),this.descriptionInputEl=this.element.querySelector("#description"),this.peopleInputEl=this.element.querySelector("#people"),this.configure()}configure(){this.element.addEventListener("submit",this.submitHandler)}renderContent(){}validateInputs(e,t,n){const s={value:t,required:!0,minLen:5},i={value:n,required:!0,min:1};return r({value:e,required:!0})&&r(s)&&r(i)}gatherUserInput(){const e=this.titleInputEl.value,t=this.descriptionInputEl.value,n=this.peopleInputEl.value;if(this.validateInputs(e,t,n))return[e,t,+n];alert("Invalid input, please try again!")}clearInputs(){this.titleInputEl.value="",this.peopleInputEl.value="",this.descriptionInputEl.value=""}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(this.clearInputs(),3===(null==t?void 0:t.length)){const[e,n,r]=t;l.addProject(e,n,r)}}}!function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);i>3&&l&&Object.defineProperty(t,n,l)}([o],a.prototype,"submitHandler",null);var c=function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l};class d extends e{get persons(){return 1===this.project.people?"1 person":`${this.project.people} people`}constructor(e,t){super("single-project",e,"beforeend",t.id),this.project=t,this.configure(),this.renderContent()}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+" assigned",this.element.querySelector("p").textContent=this.project.description}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){console.log("DragEnd")}}c([o],d.prototype,"dragStartHandler",null),c([o],d.prototype,"dragEndHandler",null);var p=function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l};class u extends e{constructor(e){super("project-list","app","beforeend",`${e}-projects`),this.type=e,this.assignedProjects=[],this.configure(),this.renderContent()}renderProjects(){document.getElementById(`${this.type}-projects-list`).innerHTML="";for(const e of this.assignedProjects)new d(this.element.querySelector("ul").id,e)}renderContent(){const e=`${this.type}-projects-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type.toUpperCase()+" PROJECTS"}configure(){l.addListener((e=>{const t=e.filter((e=>this.type===e.status));this.assignedProjects=t,this.renderProjects()})),this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler)}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}dropHandler(e){const t=e.dataTransfer.getData("text/plain");l.moveProject(t,this.type),this.element.querySelector("ul").classList.remove("droppable")}}p([o],u.prototype,"dragOverHandler",null),p([o],u.prototype,"dragLeaveHandler",null),p([o],u.prototype,"dropHandler",null),new a,new u(n.ACTIVE),new u(n.FINISHED)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,